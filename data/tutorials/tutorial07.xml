<?xml version="1.0" encoding="UTF-8"?>
<!--
Tutorial 07 - Processing XML
-->
<tutorial status="beta">
    <!-- Activity metadata ... override anything from the course or organizer -->
    
    <!-- The meat of the presentation -->
    <slide title="Tutorial Goals" layout="normal">
        <p>This tutorial is meant to give you some practice working with
            SimpleXML to process an XML document, as described in lesson 9.</p>
        <p>I have prepared a starter project for you to build on.
            It is a webapp, meant  to process
            the XML data you built last week.</p>
    </slide>

    <slide>
        <h1>Revisions &amp; Notes</h1>    
        <ul>
            <li>How can I test if a string ends in a specific substring?
                     There is a built in function in PHP to do exactly that.
               <code>
substr_compare($str, $test, strlen($str)-strlen($test), strlen($test)) === 0;
                </code>
            </li>
            <li>Cleaned up the .htaccess and tested that the starter project 
                works as intended.</li>
        </ul>            
    </slide>
    
    <slide title="Background" layout="normal">
        <p>Barker Bob, with his Burger Bar, wants to hold a bigger,
            better, burger bonanza, in honour of his uncle Billy Bob.</p>
        <p>Last week, you devised a suitable DTD for constraining
            orders, and that resulted in some test data.</p>
        <p>Your job this week is to process a selected order
            and print out a receipt for it,.</p>
    </slide>

    <slide title="Preparation" layout="normal">
        <p>I have prepared a 
            <a href="https://github.com/comp4711/winter2015-lab07" target="_blank">
                starter project</a>. </p>
        <p>We are using the same menu as last week, and its data is inside
            the menu.xml file inside the data folder.</p>
        <p>Fork the github project, and clone it locally to
            work with, the same as you have done with the previous tutorials.</p>
            <p>Don't forget to add the special order you made last week, 
                to the data folder!</p>
    </slide>

    <slide title="The End Result" layout="normal">
        <p>Your webapp is a two-page one: the home page should present a list
            of the orders found in the data folder, and the order page should print out
            the details for the selected order.</p>
        <p>There shall be <strong>no PHP in your views</strong>. You are welcome to add
            view fragments as you deem fit.</p>
        <p>There shall be <strong>no SimpleXML in your controllers</strong>.
            You are welcome to add models or model methods, as you deem fit.</p>
    </slide>

    <slide title="What Needs Doing?" layout="normal">
        <ol>
            <li>
                <a href="#{tag1}">Present a basic list of orders</a>
            </li>
            <li>
                <a href="#{tag2}">Present an order's basic receipt</a>
            </li>
            <li>
                <a href="#{tag3}">Dress up the order list and receipts</a>
            </li>
        </ol>
    </slide>

    <slide title="1. PRESENT A BASIC LIST OF ORDERS" layout="normal" tag="tag1">
        <div class="left">
            <p>This should be in your Welcome controller:</p>
            <ul>
                <li>Use the directory helper to get a list of files</li>
                <li>Filter out the .xml ones</li>
                <li>For each, add an output row with the file name, linked to
                    "welcome/order/{filename}", where the filename is substituted
                    appropriately.</li>
                <li>Each order will have a designated customer name</li>
                <li>An order might have special instructions, eg for delivery</li>
            </ul>
        </div>
        <div class="right">
            <p>Sample output:</p>
            <code>
                Barker Bob's Burger Bar - Orders<br/>
                <br/>
                order1<br/>
                order2<br/>
                order3<br/>
                <br/>
                Select an order from the list above to see its receipt.
            </code>
        </div>
    </slide>

    <slide title="2. PRESENT A BASIC ORDER RECEIPT" layout="normal" tag="tag2">
        <div class="left">
            <p>This will be implemented in the <code>Welcome::order($num)</code> method.</p>
            <p>You will need to reference the <code>Menu</code> model,
                which has been started for you.</p>
            <p>You will need an <code>Order</code> model, using techniques similar to that
                in the Menu model.</p>
                <p>Show any special instructions for a burger below the burger details,
                any special instructions for an order before any burger details.</p>
        </div>
        <div class="right">
            <p>Sample output:</p>
            <code>
                Order1 for Jim (eatin)<br/>
                <br/>
                *Burger #1*<br/>
                Base: beef burger<br/>
                Cheese: gruyere (top)<br/>
                Toppings: seasonal mushrooms<br/>
                Sauces: heinz ketchup, hellmans mayo
            </code>
        </div>
    </slide>

    <slide title="Menu Model" layout="normal" >
        <p>Your Menu model has provision for patties, with some suggested
            alternative strategies. You don't need all of them!</p>
        <p>Add handling for:</p>
        <ul>
            <li>Cheeses</li>
            <li>Toppings</li>
            <li>Sauces</li>
        </ul>
    </slide>
    <slide title="Order Model" layout="normal" >
        <p>You will need an Order model, with provision for
            accessing the parts of an order and returning
            them in a useful format for your controllers.</p>
        <p>I suggest a parameter for the Order constructor: the
            filename of the XML document an order comes from.</p>
        <p>You have decisions to make, and you may want to defer them until
            you get to the appropriate point in the receipt printing!</p>
        <ul>
            <li>Store order parts as codes or records?</li>
            <li>Deal with order totalling here or in the controller?</li>
            <li>Prepare view parameters here or in the controller?</li>
        </ul>
    </slide>


    <slide title="Your Order Receipt" layout="normal" >
        <p>I suggest doing things one step at a time:</p>
        <ul>
            <li>Restaurant header</li>
            <li>Order header</li>
            <li>Burger header</li>
            <li>Burger base</li>
            <li>Cheeses - only show if there are some</li>
            <li>Toppings - either "none" or comma-separated list</li>
            <li>Sauces - either "none" or comma-separated list</li>
        </ul>
    </slide>

    <slide title="3. DRESS THINGS UP" layout="normal" tag="tag3">
        <div class="left">
            <p>Add the customer's name to the order list on the homepage.</p>
            <code>
                Barker Bob's Burger Bar - Orders<br/>
                <br/>
                order1 (Jim)<br/>
                order2 (George)<br/>
                order3 (Insert your name here)<br/>
                <br/>
                Select an order from the list above to see its receipt.
            </code>
        </div>
        <div class="right">
            <p>Add pricing totals for each burger and for each order as a whole.</p>
            <code>
                Order1 for Jim (eatin)<br/>
                <br/>
                *Burger #1*<br/>
                Base: beef burger<br/>
                Cheese: gruyere (top)<br/>
                Toppings: seasonal mushrooms<br/>
                Sauces: heinz ketchup, hellmans mayo<br/>
                Burger total: $x.xx<br/>
                <br/>
                Order TOTAL: $x.xx
            </code>
        </div>
    </slide>



</tutorial>
