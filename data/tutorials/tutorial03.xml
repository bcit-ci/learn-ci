<?xml version="1.0" encoding="UTF-8"?>
<!--
Tutorial 03 - Working With Controllers & Routing
-->
<tutorial status="beta">
    <!-- Activity metadata ... override anything from the course or organizer -->
    
    <!-- The meat of the presentation -->
    <slide title="Tutorial Goals" layout="normal">
        <p>This tutorial will walk you through some common controller and
            routing challenges.</p>
        <p>The goal is to fix the broken starter webapp, as directed.</p>
        <p>That can't be so hard, can it? &lt;-- said with a straight face.</p>
        <p>Suggestion: you may want to skim the slideshow first,
            before working your way through it.</p>
    </slide>

    <slide title="Preparation" layout="normal">
        <div class="left">
            <p>I have prepared a 
                <a href="https://github.com/comp4711/winter2015-lab03">
                    starter webapp</a> â€“ a mini 
                "content management system". 
                It is incomplete and the pieces are not properly connected, 
                and you need to fix these, as described following.</p>
            <p>Fork the github project, and clone it locally to
                work with, the same as you have done with the previous tutorial.</p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="600" height="312" src="/data/tutorials/pix/3-1.png"/>
        </div>
    </slide>

    <slide title="The Starter Webapp" layout="normal">
        <p>The "Quotes" starter webapp
            uses bootstrap and jquery, 
            simply because they make it so easy to have a 
            not-ugly-though-the-same-as-everyones looking site.</p>
        <p>The  Quotes webapp looks beautiful, I have to admit, but none 
            of the links work, apart from the logo taking you back 
            to the homepage :(</p>
        <p>Your job is to fix these :)</p>
    </slide>

    <slide title="Where Do I Start?" layout="normal">
        <p>There is a view template in the views folder, <code>justone</code>. 
            This is meant to display just a single quote. 
            Each of the broken links needs to resolve to the appropriate 
            controller or method in a controller, which extracts the 
            relevant quote from the model, 
            and builds the view parameters for <code>justone</code> to present it.</p>
        <p>Solve the logic for the first broken link that you fix, 
            and you can re-use the technique for all the others.</p>
    </slide>

    <slide title="What Needs Fixing?" layout="normal">
        <p>You might use this as a checklist.</p>
        <table style="font-size:80%; padding: 10px; text-align:left">
            <tr>
                <th>Link</th>
                <th>Location</th>
                <th>How to Fix It</th>
            </tr>
            <tr>
                <td>first</td>
                <td>Navbar</td>
                <td>A suitable <b>new controller</b> in controllers/</td>
            </tr>
            <tr>
                <td>last</td>
                <td>Navbar</td>
                <td>A suitable <b>new controller</b> in controllers/last/</td>
            </tr>
            <tr>
                <td>sleep</td>
                <td>Homepage</td>
                <td>Remapped to first::zzz</td>
            </tr>
            <tr>
                <td>lock/em/up</td>
                <td>Homepage</td>
                <td>Remapped to welcome::shucks, using wildcard (lock / *)</td>
            </tr>
            <tr>
                <td>show/3</td>
                <td>Homepage</td>
                <td>Remapped to first::gimme/3, using wildcard (show / digit)</td>
            </tr>
            <tr>
                <td>dunno</td>
                <td>Homepage</td>
                <td>Remapped to guess (<b>new controller</b>)</td>
            </tr>
            <tr>
                <td>wise/bingo</td>
                <td>Homepage</td>
                <td>Remapped to bingo, using regular expression 
                    (4 letters / bingo) (<b>new controller</b>)</td>
            </tr>
            <tr>
                <td>comp4711/wisdom</td>
                <td>Homepage</td>
                <td>Remapped to bingo::wisdom, using regular expression (comp + digits / *)</td>
            </tr>
        </table>
    </slide>

    <slide title="Fixing Notes" layout="normal">
        <div class="left">
            <p>Fix the problems in sequence, working your way down the table.</p>
            <p>For each of these, I suggest you determine the controller 
                responsible for handling the request, the method inside 
                that controller, and then the necessary routing.</p>   
            <p>Note that the table row for "last" suggests a controller 
                in <code>controllers/last/</code> ... 
                this explicitly means that "last" is a subfolder 
                inside <code>application/controllers</code>. Hmmm.</p>         
        </div>
        <div class="right">
            <p>A helpful hint... if you retrieve a record from your model, 
                and you want to add its key/value pairs to the view 
                parameters array, you could have a bunch of assignments 
                (<code>$this-&gt;data['who']= ...</code>), 
                but there is an easier way:</p>
            <p>
                <code>$record = $this-&gt;quotes-&gt;whatever(...);<br/>
                    $this-&gt;data = array_merge($this-&gt;data, $record);</code>
            </p>
        </div>
    </slide>

    <slide title="Are We Done Yet?" layout="normal">
        <p>When you are done, nothing will look different.
            The links will work properly :)</p>
    </slide>

</tutorial>
