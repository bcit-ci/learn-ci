<?xml version="1.0" encoding="UTF-8"?>
<!--
Assignment 2 - Functional Webapp
-->
<lab status="beta">
    <!-- Activity metadata ... override anything from the course or organizer -->
    
    <!-- The meat of the presentation -->
    <slide title="Overall Assignment Goals" layout="normal">
        <p>The purpose of assignment 2 is to make your project functional,
            and to add admin maintenance to it.
            In a nutshell, you will be adding view flexibility, CRUD, and
            setting the stage for the game predictions.</p>
        <p>User authentication is not expected.</p>
        <p>Your assignment 1 project will need to have its database
            realized (not just mock data) and its usecases implemented
            (not just mock views).</p> 
        <p>This may sound suspiciously similar to labs #3-5! Hmmmmm.</p> 
    </slide>

    <slide title="FAQ? Revisions?" layout="normal">
        <p>If assignment details need clarifying, such changes will
            be made in this slide deck, and a note added to this page.</p>  
        <ul>
            <li></li>
        </ul>

    </slide>

    <slide title="Preparation" layout="normal">
        <p>Make sure that you create a "develop" branch in your shared
            repository, based on "master". Make this "develop" branch the default.
            This will let you continue work on assignment 2 without impacting
            your assignment 1 work, which has been preserved in the master branch.</p>
        <p>If there turn out to be issues with your assignment 1, those
            can be addressed in a "fix" branch, with a PR to the master branch.
            It will then need to be remerged into the develop branch.</p>
        <p>From this point on, all work is done on the develop branch, and it 
            will only get merged into the master branch when you have completed
            assignment 2.
            You are welcome to "tag" the master branch, perhaps "1.0",
            once you have isolated it. When you have completed the assignment,
            you would then merge your "develop" branch into the "master" branch,
            and tag the "master" branch "2.0".</p>
    </slide>

    <slide title="Submission" layout="normal">
        <p>When you are done, submit a readme or a comment to the D2L assignment dropbox, 
            with a link to your github repository.</p>
        <p>Distance students: send me an email with a link to your github repository.</p>
        <p>Due: Sunday Nov 15, 23:59 PST</p>
    </slide>

    <slide title="My Process" layout="normal">
        <p>To evaluate each project, I run a shell script using your repository name
            (so not including any .git extension), to pull your *master* branch
            into a marking folder I have setup, to launch a browser tab opened
            to your github repository, and a last browser tab opened to your
            webapp running on my system.</p>
        <p>Your repo does not have to be a NetBeans project. I can create
            a new one for it, using existing sources, as we
            have done in lab before.</p>
    </slide>
    <slide title="Your Database" layout="normal">
        <p>I expect your webapps to run as is, with the expectation that
            I may have to populate your database with the *one* SQL script I find in the root of your project,
            or in such place as you might notify me of in the readme that is part of your
            repo.</p>
        <p>An easy way to get this script is to export your database using PHPMyAdmin,
            checking the "gzipped" format to avoid potential hiccups with
            special characters in any of your table rows.</p>
        <p>In your SQL script, drop all tables you need before recreating them.
            Do not attempt to create a database, or to tie your script to a specific database.</p>
        <p>My testing assumes a "COMP4711" database, with default user "root" and no password.</p>
            
        <p>You can tailor *your* database config by having your own application/config/development
            subfolder on your local system, with over-riding database configuration
            settings. You would
            then "git ignore" that folder, so that it is not part of your repo, 
            and you aren't sharing
            your database username and password with me or the world.</p>
    </slide>
    <slide title="Your Repository" layout="normal">
        <p>Your repo should not include the CI3 pieces used for framework and 
            development, namely the tests and user_guide_src folders and the
            build/test scripts (composer.json, phpdoc.dist.xml, .travis.yml).
            You don't need the developer contribution files either (contributing.md and
            DCO.txt).</p>
        <p>Your repo should not include the system or user_guide folders eitherfolder. 
            Instead, your index.php 
            should set the SYSPATH to '../system3', which refers to a "system3" 
            folder at the same level as your repo.</p>
        <p>Hard-coding your SYSPATH, or using Windows-style separators, will
            break when I run your webapp locally. This results in a BOOM, and you
            know what that means!</p>
    </slide>

    <slide title="Evaluation" layout="normal">
        <p>Assignments will be evaluated out of 20, according to the following
            breakdown, which shows the relative importance or complexity
            of the gradable items:        </p>
        <div class="left">
            <ul>
                <li>Models, bound to DB tables (2)</li>
                <li>Homepage enhancements (2)</li>
                <li>Roster presentation (3)</li>
                <li>Player CRUD (3)</li>
                <li>League presentation (3)</li>
            </ul>
        </div>
        <div class="right">
            <ul>
                <li>Works properly? (3)</li>
                <li>Aesthetics &amp; consistency (2)</li>
                <li>Comments &amp; programming style (2)</li>
            </ul>
        </div>
    </slide>

    <slide title="Models" layout="normal">
        <p>Your webapp will have at least 3 tables in its database, for application
            data. This does not count a session table, or any user/login table(s),
            if you are using those.</p>
        <p>I expect each table to have its own model, and you are welcome
            to use the base models provided in earlier labs as a starting point.
            Some of you have provided appropriate mock data, which can just be implemented
            as a table/model. Others will need to step up their game.</p>
        <p>Each model should have additional methods, beyond CRUD, to
            support data extraction or manipulation for your usecases.
            This means that data filtering should be done in the models,
            and most of your "business logic" will probably
            end up inside them as well.</p>
        <p>A controller using one or more of your models might
            have to filter or validate parameters,
            but those would then be passed on to the appropriate
            model method for data extraction.</p>
    </slide>

    <slide title="Model Specifics" layout="normal">
        <p>
            <strong>Players</strong> - Your players table/model will need to track player
            data to support the presentation requirements. This means name (probably
            surname and first name, comma-separated), position, jersey number,
            filename of their mugshot, and any other data you have provided for already.</p>
        <p>
            <strong>League</strong> - Your league model needs to include *all* teams
            in the league, including their team name, city, conference, division,
            and filename of their logo image. 
            You are welcome to include other data you have provided for so far.
        </p>
        <p>
            <strong>History</strong> - You need to model games history, so that you can
            predict the outcome of a game between your team and another.
            The history details will come from a service setup for assignment 3,
            that you will connect to using XML-RPC.</p>
    </slide>

    <slide title="Useful Prediction Data" layout="normal">
        <p>
            If you look at nhl.com, you will notice that each game has an
            identifier, yyyymmddnn, where "nn" is one of the games on a given day.</p>
        <p>If you look at the standings page there, you will notive a "net points"
            column, the difference between the points a team scored and the points scored
            against them; this is the basis for standings calculations.</p>
        <p>There are also some other columns, that you are welcome to include in
            your model but not required to (home vs away performance, performance
            inside a team's conference, current streak, and last 5 games summary).
        </p>
    </slide>

   <slide title="Final Model Thoughts" layout="normal">
        <p>
            You may want to provide for a configuration table of sorts,
        or perhaps for configuration settings...</p>
        <ul>
            <li>the last game # you retrieved</li>
            <li>the URL of the game scores service</li>
        </ul>
        <p>If you have nothing but time on your hands, you might even
        store predictions and compare them to actual games once
        played, with the intent of somehow profiting from
        this information to improve your predictions.
        On the other hand, this is only for fun, and not for profit,
        and I suspect you will have better uses for your time!</p>
    </slide>

    <slide title="Homepage Enhancements" layout="normal">
        <p>Mock predictor; comboc box to select opponent, randomly
        calculated prediction shown.</p>
                
    </slide>

    <slide title="Roster Presentation" layout="normal">
        <p>Presented 12 at a time, with pagination.</p>
        <p>Flexible order: name, jersey, position.</p>
        <p>Layout as table or gallery.</p>
    </slide>

    <slide title="Player CRUD" layout="normal">
        <p>Add, edit, delete players, including their mugshot,
        </p>
    </slide>

    <slide title="Rich text and image uploading" layout="normal">
        <p>... some helpful hints or details</p>
    </slide>

    <slide title="League Presentation" layout="normal">
        <p>Layout by league, conference or division.</p>
        <p>Ordered by city, name, or standing</p>
    </slide>

    <slide title="Works properly?" layout="normal">
        <p>This basically refers to your webapp working as a webapp should.</p>
        <p>Things that would cost marks here include broken hyperlinks,
            broken images, CSS not loading properly,
            and of course BOOMs.</p>
    </slide>

    <slide title="Aesthetics &amp; Consistency" layout="normal">
        <p>Your webapp pieces should look and behave seamlessly.</p>
        <p>The different pages should have similar or compatible
            styles. Nothing should look like a ransom note!</p>
    </slide>

    <slide title="Comments &amp; programming style" layout="normal">
        <p>You are programmers, and you want to be professional. Code like it.</p>
        <p>That means clearly written and formatted code, properly commented.</p>
        <p>Your views should have no PHP in them, apart from possibly comments.</p>
        <p>Remember the golden rules!!!</p>
    </slide>

</lab>
